"""
Game about Computers.

Player art:
http://opengameart.org/content/side-scroller-sprite-base-animation
"""

import pygame
import sys

# Constants
IDLE = 0
JUMP = 1
JOG = 2

LEFT = 0
RIGHT = 1

SIZE = 64

BLACK = (0, 0, 0)

WINDOW_SIZE = 500

FPS = 30

NUM_LEVELS = 5

def load_image(name):
    return pygame.image.load(name)

def fade(screen, image, rect, fps):
    for i in range(128):
        image.set_alpha(i)
        screen.blit(image, rect)

        pygame.display.flip()

        pygame.time.Clock().tick(fps)

class Game(object):
    """
    This class creates a Game.
    """
    def __init__(self):
        # Init
        pygame.init()
        self.screen = pygame.display.set_mode((WINDOW_SIZE, WINDOW_SIZE))

        # Set title
        pygame.display.set_caption("Execution")
        
        # Create player
        self.player = Player()
        
        # CREATE LEVEL
        """
        Level is a 50 tall by 25 wide array.
        Components of Level:
        [-1]        Empty
        [0 - 4]     Door
        [5 - 9]     Platform
        [10 - 14]   Moving Platform - Start and End points
        [15 - 19]   Movable Platform - Number is KeyID + 14
        [20 - 24]   Key - Number is KeyID + 19
        [25 - 29]   Enemy - Number is type
        [30 - 34]   Button - Number is KeyID + 29
        [35 - 39]   Box
        """
        # An entire level! In one bite-size piece!
        # OK, this is not exactly bite-size, but the point stands that it's an ADT.
        levelArray = [
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 15, -1, -1, 10, -1, -1, -1, -1, -1, 10,  5,  5,  5,  5,  5],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            ]
        level = Level([], [], None)
        level.levelFromArray(levelArray, load_image("Tiles/Backgrounds/background1.png"), 0)
        self.createLevel(level, 0)

        levelArray = [
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, 10,  5,  5,  5,  5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1],
            [ 5,  5, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1],
            [ 0,  0, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            ]
        level = Level([], [], None)
        level.levelFromArray(levelArray, load_image("Tiles/Backgrounds/background2.png"), 1)
        self.createLevel(level, 1)

        levelArray = [
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1,  6,  5,  5,  5,  5,  5,  5,  5,  5,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1,  6, -1, -1, -1, -1, -1, 25, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1,  7, 10,  5,  5,  5,  5,  5,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  5, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0],
            [ 5,  5,  5, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  5,  5],
            ]
        level = Level([], [], None)
        level.levelFromArray(levelArray, load_image("Tiles/Backgrounds/background3.png"), 2)
        self.createLevel(level, 2)

        levelArray = [
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 5,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1,  6, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1,  7,  5,  5,  5,  5,  5,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1,  6, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1,  7,  5,  5,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            ]
        level = Level([], [], None)
        level.levelFromArray(levelArray, load_image("Tiles/Backgrounds/background4.png"), 3)
        self.createLevel(level, 3)

        levelArray = [
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [ 5,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1,  6, -1, -1, -1, -1, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1,  7,  5,  5,  5,  5,  5,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1,  6, -1, -1, 10, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1,  6, -1, -1, -1, 16, 16, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1,  6, 31, -1, -1, 16, 30, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1,  7,  5,  5,  5,  5,  5,  5,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            ]
        level = Level([], [], None)
        level.levelFromArray(levelArray, load_image("Tiles/Backgrounds/background4.png"), 4)
        self.createLevel(level, 4)
        
        # END CREATE LEVEL

    def createLevel(self, level, levelID):
        self.player.levels[levelID] = level

    def runGame(self):
        screen = self.screen

        # Create player
        player = self.player

        # Create player variables
        jumping = False
        velocity = 0
        direction = RIGHT
        speed = 10
        movestate = 0

        # Set the level ID
        player.levelID = 0

        oldLevelID = player.levelID
        
        while True:
            if oldLevelID != player.levelID:
                self.advanceLevel(oldLevelID, screen) # Play an awesome animation!
            oldLevelID = player.levelID
            
            # Make character idle by default
            moving = False
            
            # Check for quit
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit() # Keep aust beautiful
                    sys.exit(0)

            # Get key presses
            keyCheck = pygame.key.get_pressed()
            if keyCheck[pygame.K_LEFT]:
                player.move(-speed, 0)
                direction = LEFT
                moving = True
            if keyCheck[pygame.K_RIGHT]:
                player.move(speed, 0)
                direction = RIGHT
                moving = True
            if keyCheck[pygame.K_UP] and player.onGround: # Handle jumping
                player.onGround = False
                jumping = True
                velocity = 10

            # ...Also handle jumping
            if not player.onGround:
                if velocity == 0:
                    velocity = -5
                if velocity > -30:
                    if moving and not jumping:
                        velocity -= 2
                    else:
                        velocity -= 1
            if player.onGround:
                jumping = False
                velocity = 0
            player.move(0, -velocity)

            # Get player collisions
            moving, jumping, direction, velocity, collisions = player.collide(moving, jumping, direction, velocity, player.levels[player.levelID].platforms + player.levels[player.levelID].keys)
            collisions += player.collide(moving, jumping, direction, velocity, [player.levels[player.levelID].door], True)[4]

            # Draw player to screen
            if jumping:
                speed = 7
                player.update(JUMP, direction)
            elif moving:
                speed = 10
                movestate += 1
                movestate %= 12
                player.update(JOG, direction, movestate / 2)
            else:
                speed = 10
                player.update(IDLE, direction)

            # Move platforms
            for platform in player.levels[player.levelID].platforms + player.levels[player.levelID].keys:
                if platform in collisions or isinstance(platform, MovablePlatform):
                    platform.move(player)
                else:
                    platform.move()
            player.levels[player.levelID].door.move(player)

            # Update the screen
            if oldLevelID == player.levelID:
                player.draw(screen)
                for obj in player.levels[player.levelID].platforms + player.levels[player.levelID].keys:
                    obj.draw(screen)
                player.levels[player.levelID].door.draw(screen)

                pygame.display.flip()

    def advanceLevel(self, levelID, screen):
        screen.fill(BLACK)
        for i in range(5):
            fade(screen, load_image("Tiles/Backgrounds/Transition/Level" + str(levelID) + "/part" + str(i) + ".png"), pygame.Rect(0, 0, 500, 500), 256)
            pygame.display.flip()

class Level(object):
    def __init__(self, platforms, keys, door):
        self.platforms = platforms
        self.keys = keys
        self.door = door

    def levelFromArray(self, level, background, levelID):
        """
        Level is a 50 tall by 25 wide array.
        Components of Level:
        [-1]        Empty
        [0 - 4]     Door
        [5 - 9]     Platform
        [10 - 14]   Moving Platform - Start and End points
        [15 - 19]   Movable Platform - Number is KeyID + 14
        [20 - 24]   Key - Number is KeyID + 19
        [25 - 29]   Enemy - Number is type
        [30 - 34]   Button - Number is KeyID + 29
        [35 - 39]   Box
        """
        # Store start and end points of moving platforms
        movingStart = [None, None, None, None, None]
        movingEnd   = [None, None, None, None, None]

        # Clear the current level
        self.platforms = []
        self.keys = []
        self.door = None

        self.background = background

        # Iterate through level
        for i in range(50):
            for j in range(25):
                if level[i][j] == -1:
                    # Nothing to see here
                    pass
                elif level[i][j] < 5:
                    # Make door with keyID
                    if not self.door:
                        self.door = Door(j * 20, i * 10, "Tiles/Doors/door1close.png", "Tiles/Doors/door1open.png", levelID + 1, level[i][j] + 1)
                elif level[i][j] < 10:
                    # Make platform with style!
                    self.platforms.append(Platform(j * 20, i * 10, "Tiles/Platform/metal" + str(level[i][j] - 4) + ".png"))
                elif level[i][j] < 15:
                    if movingStart[level[i][j] - 10]:
                        movingEnd[level[i][j] - 10] = (j * 20, i * 10)
                    else:
                        movingStart[level[i][j] - 10] = (j * 20, i * 10)
                elif level[i][j] < 20:
                    self.platforms.append(MovablePlatform(j * 20, i * 10, "Tiles/Platform/brick1.png", level[i][j] - 14, "Tiles/Platform/move1.png"))
                elif level[i][j] < 25:
                    self.keys.append(Key(j * 20, i * 10, "Tiles/Misc/key1.png", level[i][j] - 19))
                elif level[i][j] == 25:
                    self.platforms.append(Enemy(j * 20, i * 10, "Tiles/Enemy/rift.png"))
                elif level[i][j] < 35:
                    self.platforms.append(Button(j * 20, i * 10, "Tiles/Misc/button1up.png", "Tiles/Misc/button1down.png", level[i][j] - 29))
                elif level[i][j] < 40:
                    self.platforms.append(Box(j * 20, i * 10 - 10, "Tiles/Platform/box" + str(level[i][j] - 34) + ".png"))

        for i in range(5):
            if movingStart[i] and movingEnd[i]:
                self.platforms.append(MovingPlatform(movingStart[i][0], movingStart[i][1], "Tiles/Platform/move2.png", 5 * (movingStart[i][0] != movingEnd[i][0]), 5 * (movingStart[i][1] != movingEnd[i][1]), (movingStart[i][0], movingEnd[i][0]), (movingStart[i][1], movingEnd[i][1]), 500))
                
class Player(pygame.sprite.Sprite):
    """
    This class controls the player.
    """
    def __init__(self):
        super(Player, self).__init__()
        self.images = []
        self.images.append(load_image('Sprite/idle.png'))
        self.images.append(load_image('Sprite/jump.png'))
        self.images.append(load_image('Sprite/jog.png'))
        self.image = self.images[IDLE]

        self.rect = pygame.Rect(0, 0, SIZE, SIZE)

        # Create mask
        self.mask = self.create_mask()

        # Create key set
        self.keys = set()

        # Create levels
        self.levels = []
        for i in range(NUM_LEVELS):
            self.levels.append(Level([], [], None))

        # Create levelID
        self.levelID = 0

        # Create rect
        # self.rect = self.mask.get_bounding_rects()[0].unionall(self.mask.get_bounding_rects())

        # self.x = 0
        # self.y = 0
        
        self.onGround = False

    def create_mask(self):
        temp = pygame.Surface((SIZE, SIZE)).convert()
        temp.set_colorkey(BLACK)
        temp.fill(BLACK)
        temp.blit(self.image, (0, 0))
        temp.set_alpha(255)
        return pygame.mask.from_surface(temp)

    def update(self, image, direction, movestate = -1):
        """
        Image contains the image number (defined by constants)
        Direction contains the direction the player is facing (LEFT or RIGHT)
        Movestate is optional and contains the frame the player is currently moving in.
        """
        self.image = self.images[image]
        
        if movestate != -1:
            self.image = pygame.Surface((64, 64))
            self.image.blit(self.images[image], (0, 0), (SIZE * movestate, 0, 64, 64))

        if direction == LEFT:
            self.image = pygame.transform.flip(self.image, True, False)

        self.mask = self.create_mask()

        self.image.set_colorkey(BLACK)
        
        # x = self.rect[0]
        # y = self.rect[1]
        # self.rect = self.mask.get_bounding_rects()[0]
        # self.rect[0] = x
        # self.rect[1] = y

    def move(self, x, y):
        self.rect[0] += x
        self.rect[1] += y
        # self.x += x
        # self.y += y

    def draw(self, screen):
        # Fill the screen!
        # screen.fill(BLACK)
        screen.blit(self.levels[self.levelID].background, pygame.Rect(0, 0, 500, 500))
        screen.blit(self.image, self.rect) # pygame.Rect(self.x, self.y, SIZE, SIZE))
        
        # Draw the bounding rect!
        # pygame.draw.rect(screen, (255, 0, 0), self.rect, 1)
        
        # Draw the mask!
        # pygame.draw.polygon(screen, (255, 255, 255), self.mask.outline(), 1)
        
        # Tick that clock!
        pygame.time.Clock().tick(FPS)

    def collide(self, moving, jumping, direction, velocity, objects, second = False):
        collisions = []

        boxes = [] # Stores boxes for button collisions

        for p in objects:
            if isinstance(p, Box):
                boxes.append(p)
                didCollide = False
                for o in objects: # Get box collisions
                    if isinstance(o, Button): # If it's a button
                        if pygame.sprite.collide_mask(p, o):
                            didCollide = True
                            p.vel = 0
                            p.rect[1] = o.rect[1] - 14
                    elif isinstance(o, MovablePlatform) and o.keyID in self.keys:
                        if pygame.sprite.collide_mask(p, o):
                            didCollide = True
                            if p.mv > 0:
                                o.rect.left = p.rect.right
                            elif p.mv < 0:
                                o.rect.right = p.rect.left
                            elif p.vel > 0:
                                o.rect.bottom = p.rect.top
                            elif p.vel <= 0:
                                o.rect.top = p.rect.bottom
                            else:
                                # Impossible!
                                pass
                    elif isinstance(o, Platform) and not o == p:
                        if pygame.sprite.collide_mask(p, o):
                            didCollide = True
                            if p.vel <= 0:
                                p.rect.bottom = o.rect.top
                                p.vel = 0
                            elif p.vel > 0:
                                p.rect.top = o.rect.bottom
                                p.vel = 0
                            elif p.mv >= 0:
                                p.rect.right = o.rect.left
                            elif p.mv < 0:
                                p.rect.left = o.rect.right
                if not didCollide:
                    if p.vel > -30:
                        p.vel -= 1
                if p.mv != 0:
                    x = p.mv / abs(p.mv)
                    p.mv = abs(p.mv)
                    p.mv /= 2
                    p.mv *= x
            
        
        anyCollisions = False
        for p in objects:
            if pygame.sprite.collide_mask(self, p):
                anyCollisions = True
                collisions.append(p)
                if isinstance(p, Box):
                    # Like a MovablePlatform, but not springy.
                    if direction == RIGHT and moving:
                        p.mv = 10
                    elif direction == LEFT and moving:
                        p.mv = -10
                    elif velocity > 0:
                        p.rect.bottom = self.rect.top
                        p.vel = velocity
                    elif velocity <= 0:
                        p.rect.top = self.rect.bottom
                        p.vel = velocity
                        self.onGround = True
                    else:
                        # Impossible!
                        pass
                elif isinstance(p, Button):
                    p.up = False
                    p.image = load_image(p.downImage)
                    if p.keyID not in self.keys:
                        self.keys.add(p.keyID)
                elif isinstance(p, Enemy):
                    # You died :'(
                    self.reset(objects)
                elif isinstance(p, Key):
                    p.hide = True
                    self.keys.add(p.keyID)
                elif isinstance(p, Door):
                    if p.keyID in self.keys and not p.locked:
                        self.level(p.levelID, objects)
                elif isinstance(p, MovablePlatform):
                    if not p.keyID or p.keyID in self.keys:
                        if direction == RIGHT and moving:
                            p.rect.left = self.rect.right
                        elif direction == LEFT and moving:
                            p.rect.right = self.rect.left
                        elif velocity > 0:
                            p.rect.bottom = self.rect.top
                            velocity = 0
                        elif velocity <= 0:
                            p.rect.top = self.rect.bottom
                            self.onGround = True
                        else:
                            # Impossible!
                            pass
                    else:
                        # Pretend it's a regular platform
                        if velocity > 0:
                            self.rect.top = p.rect.bottom
                            velocity = 0
                        elif velocity <= 0:
                            self.rect.bottom = p.rect.top
                            self.onGround = True
                            velocity = 0
                        elif direction == RIGHT and moving:
                            self.rect.right = p.rect.left
                            moving = False
                        elif direction == LEFT and moving:
                            self.rect.left = p.rect.right
                            moving = False
                        else:
                            # Impossible!
                            pass                                         
                elif isinstance(p, Platform):
                    if velocity > 0:
                        self.rect.top = p.rect.bottom
                        velocity = 0
                    elif velocity <= 0:
                        self.rect.bottom = p.rect.top
                        self.onGround = True
                        velocity = 0
                    elif direction == RIGHT and moving:
                        self.rect.right = p.rect.left
                        moving = False
                    elif direction == LEFT and moving:
                        self.rect.left = p.rect.right
                        moving = False
                    else:
                        # Impossible!
                        pass
                else:
                    pass # U banana
            else:
                if isinstance(p, Button):
                    p.up = True
                    p.image = load_image(p.upImage)
                    if p.keyID in self.keys:
                        self.keys.remove(p.keyID)
                    for o in boxes: # Button collisions!
                        if pygame.sprite.collide_mask(p, o):
                            p.up = False
                            p.image = load_image(p.downImage)
                            if p.keyID not in self.keys:
                                self.keys.add(p.keyID)
                            break
        if self.rect[1] > 500 + SIZE or self.rect[1] < 0 or self.rect[0] < 0 - SIZE or self.rect[0] > 500 + SIZE:
            self.reset(objects)
            moving = False
            jumping = False
            direction = RIGHT
        if not anyCollisions and not second:
            self.onGround = False
        return [moving, jumping, direction, velocity, collisions]

    def reset(self, objects):
        self.rect[0] = 0
        self.rect[1] = 0
        self.keys = set()
        for obj in objects:
            if isinstance(obj, Key):
                obj.hide = False
            elif isinstance(obj, Box):
                obj.rect[0] = obj.x
                obj.rect[1] = obj.y
                obj.vel = 0
                obj.mv = 0

    def level(self, levelID, objects):
        # Go to level levelID
        self.levelID = levelID
        
        # Always safe to reset
        self.reset(objects)

class Platform(pygame.sprite.Sprite):
    def __init__(self, x, y, image, flip = None):
        super(Platform, self).__init__()
        self.image = load_image(image)
        if flip:
            self.image = pygame.transform.flip(self.image, flip[0], flip[1])
        # Create mask
        self.mask = pygame.Mask((20, 10))
        self.mask.fill() # This totally works
        
        self.rect = pygame.Rect(x, y, 20, 10)

    def draw(self, screen):
        self.image.set_colorkey(BLACK)
        screen.blit(self.image, self.rect)

    def move(self, player = None):
        pass # Don't do anything!

class MovingPlatform(Platform):
    def __init__(self, x, y, image, xspeed, yspeed, xbounds, ybounds, pause = 0, flip = None):
        """
        Pause is in milliseconds.
        """
        super(MovingPlatform, self).__init__(x, y, image, flip)
        self.xspeed = xspeed
        self.yspeed = yspeed
        self.xbounds = xbounds
        self.ybounds = ybounds
        if self.xbounds[0] > self.xbounds[1]:
            self.xbounds = (self.xbounds[1], self.xbounds[0])
        if self.ybounds[0] > self.ybounds[1]:
            self.ybounds = (self.ybounds[1], self.ybounds[0])
        self.pause = pause
        self.xlast = pygame.time.get_ticks() - self.pause
        self.ylast = pygame.time.get_ticks() - self.pause
        self.xmove = True
        self.ymove = True

    def move(self, player = None):
        if (pygame.time.get_ticks() - self.xlast) > self.pause:
            self.xmove = True
            self.rect[0] += self.xspeed
            if player:
                player.rect[0] += self.xspeed * 1.5
        if (pygame.time.get_ticks() - self.ylast) > self.pause:
            self.ymove = True
            self.rect[1] += self.yspeed
            if player:
                player.rect[1] += self.yspeed * 1.5
        if (self.rect[0] < self.xbounds[0] or self.rect[0] > self.xbounds[1]) and self.xmove:
            self.xspeed *= -1
            self.rect[0] += self.xspeed
            if player:
                player.rect[0] += self.xspeed * 1.5
            self.xmove = False
            self.xlast = pygame.time.get_ticks()
        if (self.rect[1] < self.ybounds[0] or self.rect[1] > self.ybounds[1]) and self.ymove:           
            self.yspeed *= -1
            self.rect[1] += self.yspeed
            if player:
                player.rect[1] += self.yspeed * 1.5
            self.ymove = False
            self.ylast = pygame.time.get_ticks()
            
class MovablePlatform(Platform):
    def __init__(self, x, y, image, keyID = None, unlockImage = None, flip = None):
        super(MovablePlatform, self).__init__(x, y, image, flip)
        self.x = x
        self.y = y

        self.keyID = keyID
        self.unlockImage = unlockImage
        self.originImage = self.image

    def move(self, player = None):
        if player:
            if self.keyID in player.keys:
                self.image = load_image(self.unlockImage) # It's unlocked!
            else:
                self.image = self.originImage
        if abs(self.rect[0] - self.x) > 1:
            self.rect[0] += (self.x - self.rect[0]) / 2.0
        else:
            self.rect[0] = self.x
        if abs(self.rect[1] - self.y) > 1:
            self.rect[1] += (self.y - self.rect[1]) / 2.0
        else:
            self.rect[1] = self.y

class Key(Platform): # I know a key isn't really a platform, but this works in terms of abstraction.
    def __init__(self, x, y, image, keyID):
        super(Key, self).__init__(x, y, image)

        self.hide = False
        self.keyID = keyID

    def draw(self, screen):
        self.image.set_colorkey(BLACK)
        if not self.hide:
            screen.blit(self.image, self.rect)

class Button(Platform):
    def __init__(self, x, y, upImage, downImage, keyID):
        super(Button, self).__init__(x, y, upImage)

        self.upImage = upImage
        self.downImage = downImage

        self.up = True

        self.keyID = keyID

class Door(Platform): # Takes you to the Next Level!
    def __init__(self, x, y, lockImage, unlockImage, levelID, keyID = None):
        super(Door, self).__init__(x, y, lockImage)

        self.lockImage = lockImage
        self.unlockImage = unlockImage

        self.locked = True

        # Recreate the rect and mask because it's a different size
        self.mask = pygame.Mask((40, 80))
        self.mask.fill()
        
        self.rect = pygame.Rect(x, y, 40, 80)

        self.levelID = levelID
        self.keyID = keyID

    def move(self, player):
        if (not self.keyID) or (self.keyID in player.keys):
            self.image = load_image(self.unlockImage)
            self.locked = False
        else:
            self.image = load_image(self.lockImage)
            self.locked = True

    def draw(self, screen):
        self.image.set_colorkey(BLACK)
        screen.blit(self.image, self.rect)
            
class Box(Platform):
    def __init__(self, x, y, image):
        super(Box, self).__init__(x, y, image)
        
        self.mask = pygame.Mask((20, 20))
        self.mask.fill()

        self.rect = pygame.Rect(x, y, 20, 20)

        self.x = x
        self.y = y

        self.mv = 0
        self.vel = 0

    def move(self, player = None):
        if self.rect[1] > 500 + SIZE or self.rect[1] < 0 or self.rect[0] < 0 - SIZE or self.rect[0] > 500 + SIZE:
            self.rect[0] = self.x
            self.rect[1] = self.y
            self.vel = 0
            self.mv = 0
        self.rect[1] -= self.vel
        self.rect[0] += self.mv


# An enemy IS a platform. That's all it is! The only reason this class exists is for abstraction purposes.
# (And to change the mask size.)
class Enemy(Platform):
    def __init__(self, x, y, image):
        super(Enemy, self).__init__(x, y, image)

        self.mask = pygame.Mask((10, 20))
        self.mask.fill()

        self.rect = pygame.Rect(x, y, 10, 20)

def main():
    game = Game()
    game.runGame()

if __name__ == '__main__':
    main()
